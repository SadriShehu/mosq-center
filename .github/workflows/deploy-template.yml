name: deploy
on:
  workflow_call:
    inputs:
      deployment_environment:
        type: string
        required: true
      artifact_registry_docker_image:
        type: string
        required: true

jobs:
  deploy:
    runs-on: ubuntu-22.04
    env:
      TF_WORKSPACE: ${{ inputs.deployment_environment }}
      TF_VAR_artifact_registry_docker_image: ${{ inputs.artifact_registry_docker_image }}
      TF_WORKING_DIR: infrastructure/gcp/
    defaults:
      run:
        shell: bash
        working-directory: infrastructure/gcp/
    permissions: 'write-all'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Authenticate with Google Cloud
        id: auth
        uses: google-github-actions/auth@v0.4.0
        with:
            token_format: access_token
            workload_identity_provider: 'projects/495615477282/locations/global/workloadIdentityPools/mosq-center-id-pool/providers/mosq-center-pool-provider'
            service_account: 'pipeline@mosq-center.iam.gserviceaccount.com'
      - name: Get terraform version from file
        id: get_terraform_version
        run: echo "version=$(cat .terraform-version)" >> $GITHUB_OUTPUT
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ steps.get_terraform_version.outputs.version }}
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
      - name: Terraform Init
        id: init
        run: terraform init
      - name: Terraform Validate
        id: validate
        run: terraform validate
      - name: Terraform Plan
        id: plan
        run: terraform plan -input=false
      - uses: actions/github-script@v6
        if: github.event.pull_request.merged != true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
            </details>
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.TF_WORKING_DIR }}\`, Workflow: \`${{ github.workflow }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        run: terraform apply -auto-approve -input=false
      - uses: actions/github-script@v6
        if: github.event.pull_request.merged == true
        with:
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            #### Terraform Apply 📖\`${{ steps.apply.outcome }}\`
            <details><summary>Show Apply</summary>
            \`\`\`\n
            ${{ steps.apply.outputs.stdout }}
            \`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.TF_WORKING_DIR }}\`, Workflow: \`${{ github.workflow }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
